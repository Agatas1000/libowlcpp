# @file "owl_cpp/external/ext/libxml.jam"
# part of owl_cpp project.
# Distributed under GNU Lesser General Public License; see doc/license.txt.
# @date 2011 @author Mikhail K Levin

import extension ;

import property ;
import project ;
import feature ;
import common ;

extension.declare libxml ;

rule config_h ( targets * : sources * : properties * )
{
    local define ;
    local undef ;
    local version = [ property.select <libxml-version> : $(properties) ] ;
    local other =
        "#define PACKAGE \"libxml2\""
        "#define PACKAGE_NAME \"libxml2\""
        "#define PACKAGE_VERSION \"$(version:G=)\""
        "#define VERSION \"$(version:G=)\""
        "#define PACKAGE_STRING \"libxml $(version:G=)\""
        "#define PACKAGE_BUGREPORT \"xml@gnome.org\""
        "#define PACKAGE_TARNAME \"libxml$(version:G=)\""
        "#define XML_SOCKLEN_T socklen_t"
    ;
    
    switch [ property.select <target-os> : $(properties) ]
    {
        case *linux* :
        define +=
            HAVE_ARPA_INET_H
            HAVE_ARPA_NAMESER_H 
            HAVE_CTYPE_H
            HAVE_DIRENT_H
            HAVE_DLFCN_H
            HAVE_DLOPEN
            HAVE_ERRNO_H
            HAVE_FCNTL_H
            HAVE_FINITE
            HAVE_FLOAT_H
            HAVE_FPRINTF
            HAVE_FTIME
            HAVE_GETTIMEOFDAY
            HAVE_INTTYPES_H
            HAVE_LIMITS_H
            HAVE_LOCALTIME
            HAVE_MALLOC_H
            HAVE_MATH_H
            HAVE_MEMORY_H
            HAVE_NETDB_H
            HAVE_NETINET_IN_H
            HAVE_POLL_H
            HAVE_PRINTF
            HAVE_RESOLV_H
            HAVE_SIGNAL
            HAVE_SIGNAL_H
            HAVE_SNPRINTF
            HAVE_SPRINTF
            HAVE_SSCANF
            HAVE_STAT
            HAVE_STDARG_H
            HAVE_STDINT_H
            HAVE_STDLIB_H
            HAVE_STRDUP
            HAVE_STRERROR
            HAVE_STRFTIME
            HAVE_STRING_H
            HAVE_STRINGS_H
            HAVE_STRNDUP
            HAVE_SYS_MMAN_H
            HAVE_SYS_SELECT_H
            HAVE_SYS_SOCKET_H
            HAVE_SYS_STAT_H
            HAVE_SYS_TIME_H
            HAVE_SYS_TIMEB_H
            HAVE_SYS_TYPES_H
            HAVE_TIME_H
            HAVE_UNISTD_H
            HAVE_VA_COPY
            HAVE_VFPRINTF
            HAVE_VSNPRINTF
            HAVE_VSPRINTF
            PROTOTYPES
            __PROTOTYPES
            STDC_HEADERS
            ;
        undef +=
            HAVE_ISINF
            HAVE_ISNAN
            HAVE_LIBPTHREAD
            HAVE_PTHREAD_H
            SUPPORT_IP6
            HAVE_GETADDRINFO
            HAVE_DLOPEN
            ICONV_CONST
            ;
        other +=
            ""
        ;
        
        case *windows* :
        define +=
            HAVE_ASSERT_H HAVE_FCNTL_H HAVE_IEEEFP HAVE_STRING_H HAVE_SYS_TYPES_H
            HAVE_IO_H HAVE_SEARCH_H
            USE_WIN32_FILEIO
            ;
        undef +=
            HAVE_APPLE_OPENGL_FRAMEWORK
            HAVE_DLFCN_H HAVE_FLOOR
            HAVE_INT16 HAVE_INT32 HAVE_INT8 HAVE_INTTYPES_H HAVE_ISASCII
            HAVE_LFIND HAVE_LIBC HAVE_LIBM HAVE_LIMITS_H HAVE_MALLOC_H
            HAVE_MEMMOVE HAVE_MEMORY_H HAVE_MEMSET HAVE_MMAP HAVE_POW
            HAVE_PTHREAD HAVE_SQRT HAVE_STDINT_H HAVE_STDLIB_H
            HAVE_STRCASECMP HAVE_STRCHR HAVE_STRINGS_H
            HAVE_STRRCHR HAVE_STRSTR HAVE_STRTOL HAVE_STRTOUL HAVE_SYS_STAT_H
            HAVE_SYS_TIME_H HAVE_UNISTD_H HAVE_WINDOWS_H
            NO_MINUS_C_MINUS_O
            PTHREAD_CREATE_JOINABLE SIZEOF_INT SIZEOF_LONG STDC_HEADERS
            TIME_WITH_SYS_TIME TM_IN_SYS_TIME WORDS_BIGENDIAN X_DISPLAY_MISSING
            _FILE_OFFSET_BITS _LARGE_FILES const off_t size_t
            ;
        other += 
        ""
            ;
    }
    if [ property.select <architecture> : $(properties) ]
        in <architecture>x86 <architecture>ia64
    {
        other +=
            "#define HOST_FILLORDER FILLORDER_LSB2MSB"
            "#undef WORDS_BIGENDIAN"
            ;
    }
    else
    {
        other +=
            "#define HOST_FILLORDER FILLORDER_MSB2LSB"
            "#define WORDS_BIGENDIAN"
            ;
    }
    VERSION on $(<) = $(version:G=) ;
    CONFIG on $(<) =
        $(other)
        "#define $(define) 1"
        "#undef $(undef)"
        ;
    NL on $(<) = "
" ;
}
actions config_h
{
    @($(STDOUT):E=$(CONFIG:J=$(NL))
) > "$(<)"
}

rule init ( version ? : location : options * )
{
    version ?= default ;
    
    local requirements = [ 
        extension.define libxml $(version) 
        : $(location) 
        : $(options) 
    ] ;
    
    make config.h : : @config_h
        :   <libxml-version>$(version)
#            <location-prefix>src
        ;
    explicit config.h ;
    
    local src_exclude = nanohttp.c ;
    local src = [ glob $(location)/*.c : parseTime.cpp ] ;
#    echo $(src) ;
    lib libxml2
        :   $(src)
        :   
            $(requirements)
            <include>$(location)/include
            <implicit-dependency>config.h
            <dependency>config.h
        :   
        :   
            <include>$(location)/include
            <implicit-dependency>config.h
            <dependency>config.h
        ;
}


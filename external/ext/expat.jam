#~ Copyright Redshift Software, Inc. 2006.
#~ Distributed under the Boost Software License, Version 1.0.
#~ (See accompanying file LICENSE_1_0.txt or copy at
#~ http://www.boost.org/LICENSE_1_0.txt)

### Support for building eXpat library <http://expat.sourceforge.net/>.
### Targets:
###     /ext/expat//expat

import extension ;
import property ;
import project ;
import feature ;
import common ;
import path ;
import utils ; #local jam-file

extension.declare expat ;

rule config_h ( targets * : sources * : properties * ) {
   local define =
      HAVE_DLFCN_H
      HAVE_FCNTL_H
      HAVE_INTTYPES_H
      HAVE_MEMMOVE
      HAVE_MEMORY_H
      HAVE_STDINT_H
      HAVE_STDLIB_H
      HAVE_STRINGS_H
      HAVE_STRING_H
      HAVE_SYS_STAT_H
      HAVE_SYS_TYPES_H
      HAVE_UNISTD_H
      STDC_HEADERS
      XML_DTD
      XML_NS
   ;
   
   local undef = WORDS_BIGENDIAN const off_t size_t ;

   local v = [ property.select <expat-version> : $(properties) ] ;
   v = $(v:G=) ;
   
   local other =
      "#define PACKAGE_BUGREPORT \"expat-bugs@lists.sourceforge.net\""
      "#define PACKAGE_NAME \"expat\""
      "#define PACKAGE_STRING \"expat $(v)\""
      "#define PACKAGE_TARNAME \"expat\""
      "#define PACKAGE_VERSION \"$(v)\""
      "#define XML_CONTEXT_BYTES 1024"
      "#define BYTEORDER 1234"
   ;

   switch [ property.select <target-os> : $(properties) ] {
      case *linux* :
         define +=
         HAVE_BCOPY
         HAVE_GETPAGESIZE
         HAVE_MMAP
      ;
      
      case *darwin* :
         define +=
         HAVE_BCOPY
         HAVE_GETPAGESIZE
         HAVE_MMAP
      ;

      case *windows* :
         define +=
      ;

      undef +=
         HAVE_BCOPY HAVE_GETPAGESIZE HAVE_MMAP 
      ;
   }

   CONFIG on $(<) =
      "#ifndef EXPAT_CONFIG_H"
      "#define EXPAT_CONFIG_H"
      ""
      $(other)
      "#define $(define) 1"
      "#undef $(undef)"
      ""
      "#include \"boost/config.hpp\""
      "#ifndef BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_IMPORT"
      "#endif"
      "#if defined(EXPAT_DYN_LINK)"
      "#  if defined(EXPAT_SOURCE)"
      "#     define XMLIMPORT BOOST_SYMBOL_EXPORT"
      "#  else"
      "#     define XMLIMPORT BOOST_SYMBOL_IMPORT"
      "#  endif"
      "#else"
      "#  define XMLIMPORT"
      "#endif"
      ""
      "#endif // EXPAT_CONFIG_H"
   ;

   NL on $(<) = "
" ;
}
actions config_h { @($(STDOUT):E=$(CONFIG:J=$(NL))$(NL)) > "$(<)" }

rule init ( version ? : location : options * ) {
   version ?= default ;

   make-singleton expat_config.h 
      : 
      :  @config_h
      :  <expat-version>$(version)
         <location>$(GENERATED_INCLUDE)/expat
   ;

   local location_src = [ path.join $(location) lib ] ;
   local src = xmlparse.c xmltok.c xmlrole.c ;
   
   local requirements =
      [ extension.define expat $(version) : $(location) : $(options) ]
      <include>$(location_src)
      <include>$(BOOST[1])
      <toolset>gcc:<cflags>"-fvisibility=hidden"
      <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
      <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
      <toolset>msvc:<define>XML_USE_MSC_EXTENSIONS
      <define>HAVE_EXPAT_CONFIG_H
      <define>EXPAT_SOURCE
      <implicit-dependency>expat_config.h
      <link>shared:<define>EXPAT_DYN_LINK
      <link>static:<define>XML_STATIC
   ;
   
   lib expat
      :  $(location_src)/$(src)
      :  $(requirements)
      : #default build options
      :  <include>$(location_src)
   ;
   
}


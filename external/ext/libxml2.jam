# @file "owlcpp/external/ext/libxml2.jam"
# part of owlcpp project.
# Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
# Copyright Mikhail K Levin 2012

# Boost.build script for building libxml2 library <http://www.xmlsoft.org/>

import extension ;
import property ;
import project ;
import feature ;
import common ;
import regex ;
import path ;
import modules ;

extension.declare libxml2 ;

## 
################################################################################
rule transform_h ( location : version ) {
   local incl_dir = [ path.join $(location) include libxml ] ;
   local files = [ path.glob $(incl_dir) : *.h : *xmlversion.h ] ;
   local files_out = ;

   for local file in $(files) {
      local file_out = [ path.join $(GENERATED_INCLUDE) libxml $(file:D="") ] ;
      files_out += $(file_out) ;
      make-singleton $(file_out)
         : $(file)
         : @common.copy
      ;
   }
   
   local config = $(GENERATED_INCLUDE)/libxml_include/config.h ;
   make-singleton $(config) :  : @config_h ;
   
   local xmlversion = $(GENERATED_INCLUDE)/libxml/xmlversion.h ;
   make-singleton $(xmlversion) : $(incl_dir)/xmlversion.h : @xmlversion_h ;
   
   return $(files_out) $(config) $(xmlversion) ;
}

## 
################################################################################
rule config_h ( targets * : sources * : properties * ) {
   CONFIG on $(<) =
      "#ifndef __CONFIG_H__"
      "#define __CONFIG_H__"
      
      "#define HAVE_CTYPE_H"
      "#define HAVE_STDARG_H"
      "#define HAVE_MALLOC_H"
      "#define HAVE_ERRNO_H"
      
      "#if defined(_WIN32_WCE)"
      "#undef HAVE_ERRNO_H"
      "#include <windows.h>"
      "#include "wincecompat.h""
      "#else"
      "#define HAVE_SYS_STAT_H"
      "#define HAVE__STAT"
      "#define HAVE_STAT"
      "#define HAVE_STDLIB_H"
      "#define HAVE_TIME_H"
      "#define HAVE_FCNTL_H"
      "#include <io.h>"
      "#include <direct.h>"
      "#endif"
      
      "#include <libxml/xmlversion.h>"
      
      "#ifndef ICONV_CONST"
      "#define ICONV_CONST const"
      "#endif"
      
      "#ifdef NEED_SOCKETS"
      "#include <wsockcompat.h>"
      "#endif"
      
      "#undef except"
      
      "#define HAVE_ISINF"
      "#define HAVE_ISNAN"
      "#include <math.h>"
      "#if defined(_MSC_VER) || defined(__BORLANDC__)"
      "#include <float.h>"
      "#endif /* _MSC_VER */"
      
      "#if defined(_MSC_VER)"
      "#define mkdir(p,m) _mkdir(p)"
      "#define snprintf _snprintf"
      "#if _MSC_VER < 1500"
      "#define vsnprintf(b,c,f,a) _vsnprintf(b,c,f,a)"
      "#endif"
      "#elif defined(__MINGW32__)"
      "#define mkdir(p,m) _mkdir(p)"
      "#endif"
      
      "#if defined(LIBXML_THREAD_ENABLED)"
      "#if !defined(HAVE_PTHREAD_H) && !defined(HAVE_WIN32_THREADS) && !defined(_WIN32_WCE)"
      "#define HAVE_WIN32_THREADS"
      "#endif"
      "#endif"
      
      "#if !defined(FALSE)"
      "#define FALSE 0"
      "#endif"
      "#if !defined(TRUE)"
      "#define TRUE (!(FALSE))"
      "#endif"
      "#endif /* __CONFIG_H__ */"
   ;
   NL on $(<) = "
" ;
}
actions config_h { @($(STDOUT):E=$(CONFIG:J=$(NL))$(NL)) > "$(<)" }

## 
################################################################################
local rule undef ( src : expr ) {
   local re = "#if +[01][\n]#define +$(expr)[\n]#endif" ;
   return [ regex.replace $(src) $(re) "#undef $(expr)" ] ;
}

## 
################################################################################
rule xmlversion_h ( targets * : sources * : properties * ) {
   local src = [ read_file $(sources:G=) ] ;
   src = [ undef $(src) : LIBXML_FTP_ENABLED ] ;
   src = [ undef $(src) : LIBXML_HTTP_ENABLED ] ;
   src = [ undef $(src) : LIBXML_ZLIB_ENABLED ] ;
   
   STR on $(<) = $(src) ;
}
actions xmlversion_h { @($(STDOUT):E=$(STR)) > "$(<)" }

## 
################################################################################
rule init ( version ? : location ? : options * ) {
   
   local headers = [ transform_h $(location) : $(version) ] ;
   
   local src =
      buf c14n catalog chvalid debugXML dict DOCBparser encoding entities error 
      globals hash HTMLparser HTMLtree legacy list parser 
      parserInternals pattern relaxng SAX2 SAX schematron threads tree uri valid 
      xinclude xlink xmlIO xmlmemory xmlreader xmlregexp xmlmodule xmlsave 
      xmlschemas xmlschemastypes xmlunicode xmlwriter xpath xpointer xmlstring
#      nanoftp nanohttp
   ;

   ICONV_LIB ?= $(ICONV[1])/lib/iconv_a.lib ;
   ICONV_DLL ?= $(ICONV[1])/bin/iconv.dll $(ICONV[1])/lib/iconv.lib ;
   ICONV_H ?= $(ICONV[1])/include ;
   
   lib iconv
      : #sources
      : #requirements
         <include>$(ICONV_H)
         <link>shared:<file>$(ICONV_DLL)
         <link>static:<file>$(ICONV_LIB)
      : #default options
      : #usage requirements
         <include>$(ICONV_H)
   ;
   
   local requirements =
      [ extension.define libxml2 $(version) : $(location) : $(options) ]
      <include>$(GENERATED_INCLUDE)
      <include>$(GENERATED_INCLUDE)/libxml_include
      <libxml2-version>$(version)
      <libxml2-location>$(location)
      <implicit-dependency>$(headers)
      <dependency>$(headers)
      <define>WIN32
      <define>NOLIBTOOL
      <define>_REENTRANT
      <define>HAVE_COMPILER_TLS
      <define>HAVE_WIN32_THREADS
      <define>_CRT_SECURE_NO_DEPRECATE
      <define>_CRT_NONSTDC_NO_DEPRECATE
   ;
   
   lib libxml2
      : #sources
         $(location)/$(src).c
         iconv
      : $(requirements)
      : #default build options
      : #usage requirements
         <include>$(GENERATED_INCLUDE) 
         <link>static:<define>LIBXML_STATIC
   ;
}

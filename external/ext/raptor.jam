# @file "owl_cpp/external/ext/raptor.jam"
# part of owl_cpp project.
# Distributed under GNU Lesser General Public License; see doc/license.txt.
# @date 2011 @author Mikhail K Levin

# Boost.build script for building Raptor library <http://librdf.org/raptor/>

import extension ;

import property ;
import project ;
import feature ;
import common ;
import regex ;

extension.declare raptor ;

rule config_h ( targets * : sources * : properties * )
{
    local define ;
    local undef ;
    local v = [ property.select <raptor-version> : $(properties) ] ;
    v  = $(v:G=) ;
    local u = [ regex.split $(v) "\\." ] ;
    local vdmin = $(u[1])0000 ;
    local vd = [ CALC [ CALC $(vdmin) + $(u[2])00 ] + $(u[3]) ] ;
    local other =
         "#define PACKAGE \"raptor2\""
         "#define PACKAGE_NAME \"Raptor RDF Parser and Serializer library\""
         "#define PACKAGE_VERSION \"$(v)\""
         "#define VERSION \"$(v)\""
         "#define PACKAGE_STRING \"Raptor RDF Parser and Serializer library $(v)\""
         "#define PACKAGE_BUGREPORT \"http://bugs.librdf.org/\""
         "#define PACKAGE_TARNAME \"raptor2\""
         "#define PACKAGE_URL \"\""
         "#define RAPTOR_MIN_VERSION_DECIMAL $(vdmin)"
         "#define RAPTOR_VERSION_DECIMAL $(vd)"
         "#define RAPTOR_VERSION_MAJOR $(u[1])"
         "#define RAPTOR_VERSION_MINOR $(u[2])"
         "#define RAPTOR_VERSION_RELEASE $(u[3])"
         "#define SIZEOF_UNSIGNED_CHAR 1"
         "#define SIZEOF_UNSIGNED_INT 4"
         "#define SIZEOF_UNSIGNED_LONG sizeof(unsigned long)"
         "#define SIZEOF_UNSIGNED_SHORT 2"
         "#if defined AC_APPLE_UNIVERSAL_BUILD"
         "# if defined __BIG_ENDIAN__"
         "#  define WORDS_BIGENDIAN 1"
         "# endif"
         "#else"
         "# ifndef WORDS_BIGENDIAN"
         "/* #  undef WORDS_BIGENDIAN */"
         "# endif"
         "#endif"
    ;
    
    switch [ property.select <target-os> : $(properties) ]
    {
        case *linux* :
        define +=
            HAVE_DLFCN_H
            HAVE_ERRNO_H
            HAVE_EXPAT_H
            HAVE_FCNTL_H
            HAVE_GETOPT
            HAVE_GETOPT_H
            HAVE_GETOPT_LONG
            HAVE_GETTIMEOFDAY
            HAVE_INTTYPES_H
            HAVE_ISASCII
            HAVE_LIMITS_H
            HAVE_MATH_H
            HAVE_MEMORY_H
            HAVE_RAPTOR_PARSE_DATE
            HAVE_SETJMP
            HAVE_SETJMP_H
            HAVE_STDINT_H
            HAVE_STDLIB_H
            HAVE_STRCASECMP
            HAVE_STRINGS_H
            HAVE_STRING_H
            HAVE_SYS_PARAM_H
            HAVE_SYS_STAT_H
            HAVE_SYS_TIME_H
            HAVE_SYS_TYPES_H
            HAVE_UNISTD_H
            HAVE_VSNPRINTF
            HAVE_XMLCTXTUSEOPTIONS
            HAVE_XMLSAX2INTERNALSUBSET
            RAPTOR_NFC_CHECK
            RAPTOR_PARSER_GUESS
            RAPTOR_PARSER_NTRIPLES
            RAPTOR_PARSER_RDFXML
            RAPTOR_PARSER_TURTLE
            RAPTOR_SERIALIZER_NTRIPLES
            RAPTOR_WWW_NONE
            RAPTOR_XML_EXPAT
            STDC_HEADERS
            TIME_WITH_SYS_TIME
            ;
        undef +=
            ;
        BYTEORDER on $(<) = 1234 ;
        
        case *windows* :
        define +=
            HAVE_DLFCN_H HAVE_FCNTL_H HAVE_INTTYPES_H
            HAVE_MEMMOVE HAVE_MEMORY_H HAVE_STDINT_H HAVE_STDLIB_H
            HAVE_STRINGS_H HAVE_STRING_H HAVE_SYS_STAT_H HAVE_SYS_TYPES_H
            HAVE_UNISTD_H STDC_HEADERS XML_DTD XML_NS
            ;
        undef +=
            HAVE_BCOPY HAVE_GETPAGESIZE HAVE_MMAP WORDS_BIGENDIAN const off_t size_t
            ;
    }
    CONFIG on $(<) =
        $(other)
        "#define $(define) 1"
        "#undef $(undef)"
        ;
    NL on $(<) = "
" ;
}
actions config_h
{
    @($(STDOUT):E=$(CONFIG:J=$(NL))
) > "$(<)"
}

rule raptor2_h ( targets * : sources * : properties * )
{
   local v = [ property.select <raptor-version> : $(properties) ] ;
   v  = $(v:G=) ;
   local u = [ regex.split $(v) "\\." ] ;
   local vdmin = $(u[1])0000 ;
   local vd = [ CALC [ CALC $(vdmin) + $(u[2])00 ] + $(u[3]) ] ;
   import utils ;
   local src = [ utils.read_file $(sources:G=) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_DECIMAL@ $(vd) ] ;
   src = [ regex.replace $(src) @VERSION@ $(v) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_MAJOR@ $(u[1]) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_MINOR@ $(u[2]) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_RELEASE@ $(u[3]) ] ;
   
   STR on $(<) = $(src)
   ;
    NL on $(<) = "
" ;
}
actions raptor2_h
{
    @($(STDOUT):E=$(STR)
) > "$(<)"
}

rule init ( version ? : location : options * )
{

   version ?= default ;
   local requirements = [ 
      extension.define raptor $(version) : $(location) : $(options) 
   ] ;
    
   make raptor_config.h 
      : 
      : @config_h
      : <raptor-version>$(version)
        <location-prefix>src
   ;
   explicit raptor_config.h ;
   
   make raptor2.h 
      : $(location)/src/raptor2.h.in
      : @raptor2_h 
      : <raptor-version>$(version)
        <location-prefix>src
   ;
   explicit raptor2.h ;
   
   src = 
      raptor_expat.c
      raptor_rdfxml.c raptor_sax2.c
      turtle_lexer.c turtle_parser.c
      ntriples_parse.c
      raptor_guess.c
      raptor_serialize_ntriples.c
      raptor_nfc_data.c raptor_nfc.c
      strcasecmp.c
      parsedate.c
      ;
   lib raptor
        :   $(location)/src/$(src) $(PROJ_ROOT)//expat
        :   $(requirements)
            <raptor-version>$(version)
            <raptor-location>$(location)
            <include>$(location)/src
            <location-prefix>raptor
            <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
            <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
            <define>HAVE_CONFIG_H
            <define>LIBRDFA_IN_RAPTOR
            <define>RAPTOR_INTERNAL
            <implicit-dependency>raptor_config.h
            <dependency>raptor_config.h
            <implicit-dependency>raptor2.h
            <dependency>raptor2.h
            #~ <link>shared:<define>EXPAT_EXPORTS
            #~ <link>shared:<define>XML_BUILDING_EXPAT
            <link>static
            <link>static:<define>XML_STATIC
        :
        :
            <implicit-dependency>raptor2.h
            <dependency>raptor2.h
        ;
}





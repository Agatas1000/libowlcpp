# @file "owlcpp/external/ext/raptor.jam"
# part of owlcpp project.
# Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
# Copyright Mikhail K Levin 2010-2

# Boost.build script for building Raptor library <http://librdf.org/raptor/>

import extension ;
import property ;
import project ;
import feature ;
import common ;
import regex ;
import path ;

extension.declare raptor ;

## make a list of source files and copy them to new location to isolate from headers
################################################################################
rule copy-source ( version : location ) {
   local src = 
      raptor_parse raptor_serialize raptor_rfc2396 raptor_uri raptor_log 
      raptor_locator raptor_namespace raptor_qname raptor_option raptor_general 
      raptor_unicode raptor_www raptor_statement raptor_term raptor_sequence 
      raptor_stringbuffer raptor_iostream raptor_xml raptor_xml_writer 
      raptor_set turtle_common raptor_turtle_writer raptor_avltree snprintf 
      raptor_json_writer raptor_memstr raptor_concepts raptor_syntax_description 
      raptor_libxml raptor_rdfxml raptor_sax2 turtle_lexer turtle_parser 
      ntriples_parse raptor_guess raptor_librdfa raptor_serialize_ntriples 
      strcasecmp parsedate
   ;
   local src_rdfa = 
      curie iri language rdfa rdfa_utils subject triple
   ;
   if $(version) <= "2.0.6" {
      src += raptor_nfc_data raptor_nfc
      ;
   }
   if $(version) >= "2.0.8" {
      src_rdfa += context lists namespace strtok_r ;
   }
   local location_src = [ path.join $(location) src ] ;
   local location_rdfa = [ path.join $(location) librdfa ] ;
   
   local files_out = ;
   for local file in $(location_src)/$(src).c $(location_rdfa)/$(src_rdfa).c {
      local file_out = [ path.join $(GENERATED_LIB) raptor $(file:D="") ] ;
      files_out += $(file_out) ;
      make-singleton $(file_out) : $(file) : @common.copy ;
   }
   
   return $(files_out) ;
}

## Copy all headers except win32_raptor_config.h to new location.
# Generate new raptor_config.h and win32_raptor_config.h
################################################################################
rule copy-headers ( version : location : properties * ) {
   local src = [ path.join $(location) src ] ;
   local rdfa = [ path.join $(location) librdfa ] ;
   local files_in = [ path.glob $(src) $(rdfa) : *.h : *win32_raptor_config.h ] ;
   local files_out = ;
   local files_dest = [ path.join $(GENERATED_LIB) raptor ] ;

   for local file in $(files_in) {
      local file_out = [ path.join $(files_dest) $(file:D="") ] ;
      files_out += $(file_out) ;
      make-singleton $(file_out) : $(file) : @common.copy ;
   }
   
   return $(files_out) ;
}

## extract version string
################################################################################
rule version_raptor ( properties * ) {
   local v = [ property.select <raptor-version> : $(properties) ] ;
   return $(v:G=) ;
}

## 
################################################################################
rule version_split ( v ) {
   return [ regex.split $(v) "\\." ] ;
}

## 
################################################################################
rule version_calc ( v ) {
   local vs = [ version_split $(v) ] ;
   local vdmin = $(vs[1])0000 ;
   local vd = [ CALC [ CALC $(vdmin) + $(vs[2])00 ] + $(vs[3]) ] ;
   return $(vdmin) $(vd) ;
}

## 
################################################################################
rule replace-version ( src : v ) {
   local vs = [ version_split $(v) ] ;
   local vc = [ version_calc $(v) ] ;

   src = [ regex.replace $(src) @RAPTOR_VERSION_DECIMAL@ $(vc[2]) ] ;
   src = [ regex.replace $(src) @VERSION@ $(v) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_MAJOR@ $(vs[1]) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_MINOR@ $(vs[2]) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_RELEASE@ $(vs[3]) ] ;
   
   return $(src) ;
}

## 
################################################################################
rule define-as ( src : from : as ? ) {
   local re = " *#undef +$(from) *[\n]" ;
   if ! [ MATCH "($(re))" : $(src) ] {
      exit "could not find " $(re) ;
   }
   
   as ?= 1 ;
   local to = "#define $(from) $(as)
" ;
   src = [ regex.replace $(src) $(re) $(to) ] ;
   return $(src) ;
}

## 
################################################################################
rule comment-out ( src : expr ) {
   if ! [ MATCH "($(expr))" : $(src) ] {
      exit "could not find " $(expr) ;
   }
   
   local to = "/*$(expr)*/" ;
   src = [ regex.replace $(src) $(expr) $(to) ] ;
   return $(src) ;
}

## 
################################################################################
rule define-version ( src : v ) {
   local vs = [ version_split $(v) ] ;
   local vc = [ version_calc $(v) ] ;
   
   src = [ define-as $(src) : VERSION : "\"$(v)\"" ] ;
   src = [ define-as $(src) : RAPTOR_VERSION_DECIMAL : $(vc[2]) ] ;
   src = [ define-as $(src) : RAPTOR_VERSION_MAJOR : $(vs[1]) ] ;
   src = [ define-as $(src) : RAPTOR_VERSION_MINOR : $(vs[2]) ] ;
   src = [ define-as $(src) : RAPTOR_VERSION_RELEASE : $(vs[3]) ] ;
   
   return $(src) ;
}

## 
################################################################################
rule raptor_config_gen ( targets * : sources * : properties * ) {

   local src = [ read_file $(sources:G=) ] ;
   local v = [ version_raptor $(properties) ] ;
   src = [ define-version $(src) : $(v) ] ;   
   
   local defs =
      HAVE_DLFCN_H HAVE_ERRNO_H HAVE_FCNTL_H HAVE_GETOPT
      HAVE_GETOPT_LONG HAVE_GETTIMEOFDAY HAVE_INTTYPES_H HAVE_ISASCII 
      HAVE_LIBXML_HASH_H
      HAVE_LIBXML_HTMLPARSER_H HAVE_LIBXML_PARSER_H HAVE_LIBXML_SAX2_H 
      HAVE_LIMITS_H
      HAVE_MATH_H HAVE_MEMORY_H HAVE_SETJMP HAVE_SETJMP_H HAVE_STAT
      HAVE_STDDEF_H HAVE_STDINT_H HAVE_STDLIB_H HAVE_STRING_H HAVE_SYS_PARAM_H
      HAVE_SYS_STAT_H HAVE_SYS_TYPES_H HAVE_VSNPRINTF HAVE_XMLCTXTUSEOPTIONS 
      HAVE_XMLSAX2INTERNALSUBSET
      RAPTOR_LIBXML_ENTITY_ETYPE RAPTOR_LIBXML_HTML_PARSE_NONET 
      RAPTOR_LIBXML_XMLSAXHANDLER_EXTERNALSUBSET
      RAPTOR_LIBXML_XMLSAXHANDLER_INITIALIZED RAPTOR_LIBXML_XML_PARSE_NONET
      RAPTOR_PARSER_GUESS RAPTOR_PARSER_NTRIPLES
      RAPTOR_PARSER_RDFXML RAPTOR_PARSER_TURTLE RAPTOR_SERIALIZER_NTRIPLES
      RAPTOR_WWW_NONE RAPTOR_XML_LIBXML STDC_HEADERS
   ;
   
   for local def in $(defs) {
      src = [ define-as $(src) : $(def) ] ;
   }
   
   src = [ define-as $(src) : PACKAGE : "\"raptor2\"" ] ;
   src = [ define-as $(src) : PACKAGE_NAME : "\"Raptor RDF Parser and Serializer library\"" ] ;
   src = [ define-as $(src) : PACKAGE_VERSION : "\"$(v)\"" ] ;
   src = [ define-as $(src) : PACKAGE_STRING : "\"Raptor RDF Parser and Serializer library $(v)\"" ] ;
   src = [ define-as $(src) : PACKAGE_BUGREPORT : "\"http://bugs.librdf.org/\"" ] ;
   src = [ define-as $(src) : PACKAGE_TARNAME : "\"raptor2\"" ] ;
   src = [ define-as $(src) : PACKAGE_URL : "\"http://librdf.org/raptor/\"" ] ;
   src = [ define-as $(src) : RAPTOR_MIN_VERSION_DECIMAL : 20000 ] ;
   
   switch [ property.select <target-os> : $(properties) ] {
      case *linux* :
         src = [ define-as $(src) : HAVE_GETOPT_H ] ;
         src = [ define-as $(src) : HAVE_STRCASECMP ] ;
         src = [ define-as $(src) : HAVE_SYS_TIME_H ] ;
         src = [ define-as $(src) : HAVE_VASPRINTF ] ;
         src = [ define-as $(src) : TIME_WITH_SYS_TIME ] ;
         src = [ define-as $(src) : HAVE_UNISTD_H ] ;
         src = [ define-as $(src) : HAVE_STRINGS_H ] ;

      case *windows* :
   }
   
   STR on $(<) = $(src) ;
}
actions raptor_config_gen { @($(STDOUT):E=$(STR)) > "$(<)" }

## 
################################################################################
rule win32_raptor_config_gen ( targets * : sources * : properties * ) {

   local src = [ read_file $(sources:G=) ] ;
   local v = [ version_raptor $(properties) ] ;
   src = [ replace-version $(src) : $(v) ] ;
   
   src = [ comment-out $(src) : "#define vsnprintf _vsnprintf" ] ;
   
   local re = "#define snprintf _snprintf[\n]" ;
   local to = 
      "#define snprintf _snprintf" 
      "#define strcasecmp _stricmp"
      "#define S_ISREG(mode) (((mode) & S_IFMT) == S_IFREG)"
      "" 
      ;
   to = $(to:J="
") ;
   src = [ regex.replace $(src) $(re) $(to) ] ;
   
   re = "#define RAPTOR_XML_LIBXML" ;
   to = "#ifndef RAPTOR_XML_LIBXML
#define RAPTOR_XML_LIBXML
#endif" ;
   src = [ regex.replace $(src) $(re) $(to) ] ;
   
   src = [ comment-out $(src) : "#define RAPTOR_PARSER_RSS 1" ] ;
   src = [ comment-out $(src) : "#define RAPTOR_PARSER_GRDDL 1" ] ;
   src = [ comment-out $(src) : "#define RAPTOR_PARSER_N3 1" ] ;
   
   src = [ comment-out $(src) : "#define RAPTOR_SERIALIZER_ATOM 1" ] ;
   src = [ comment-out $(src) : "#define RAPTOR_SERIALIZER_RSS_1_0 1" ] ;
   src = [ comment-out $(src) : "#define RAPTOR_SERIALIZER_RDFXML 1" ] ;
   src = [ comment-out $(src) : "#define RAPTOR_SERIALIZER_RDFXML_ABBREV 1" ] ;

   src = [ comment-out $(src) : "#define RAPTOR_WWW_LIBCURL 1" ] ;

   STR on $(<) = $(src) ;
}
actions win32_raptor_config_gen { @($(STDOUT):E=$(STR)) > "$(<)" }


## 
################################################################################
rule raptor2_gen ( targets * : sources * : properties * ) {
   local v = [ version_raptor $(properties) ] ;
   local src = [ read_file $(sources:G=) ] ;
   src = [ replace-version $(src) : $(v) ] ;   
   
   local str =
      "#define RAPTOR_H"
      "" 
      "#include \"boost/config.hpp\""
      "#ifndef BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_IMPORT"
      "#endif"
      "#if defined(RAPTOR_DYN_LINK)"
      "#  if defined(RAPTOR_INTERNAL)"
      "#     define RAPTOR_API BOOST_SYMBOL_EXPORT"
      "#  else"
      "#     define RAPTOR_API BOOST_SYMBOL_IMPORT"
      "#  endif"
      "#else"
      "#  define RAPTOR_API"
      "#endif"
   ;
   src = [ regex.replace $(src) "#define RAPTOR_H" $(str:J="
") ] ;
   
   STR on $(<) = $(src) ;
}
actions raptor2_gen { @($(STDOUT):E=$(STR)) > "$(<)" }

## 
################################################################################
rule init ( version : location : options * ) {

   make-singleton raptor2.h 
      : $(location)/src/raptor2.h.in 
      : @raptor2_gen
      : <raptor-version>$(version) <location>$(GENERATED_INCLUDE)/raptor
   ;
   
   make raptor_config.h 
      : $(location)/src/raptor_config.h.in 
      : @raptor_config_gen
      : <raptor-version>$(version)
   ;
   
   make win32_raptor_config.h 
      : $(location)/src/win32_raptor_config.h.in 
      : @win32_raptor_config_gen 
      : <raptor-version>$(version)
   ;
   
   local headers = [ copy-headers  $(version) : $(location) ] ;
   
   local requirements = 
         [ extension.define raptor $(version) : $(location) : $(options) ]
         <raptor-version>$(version)
         <raptor-location>$(location)
         <include>$(GENERATED_LIB)/raptor
         <implicit-dependency>$(headers)
         <dependency>raptor2.h
         <implicit-dependency>raptor2.h
         <dependency>raptor_config.h
         <implicit-dependency>raptor_config.h
         <define>HAVE_CONFIG_H
         <define>LIBRDFA_IN_RAPTOR
         <define>RAPTOR_INTERNAL
         <link>shared:<define>RAPTOR_DYN_LINK
         <toolset>msvc:<dependency>win32_raptor_config.h
         <toolset>msvc:<implicit-dependency>win32_raptor_config.h
         <toolset>msvc:<define>WIN32
         <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
         <toolset>msvc:<define>_CRT_NONSTDC_NO_DEPRECATE
         <toolset>gcc,<target-os>linux:<cflags>"-fvisibility=hidden"
   ;
   
   lib raptor
      :  
         [ copy-source $(version) : $(location) ]
      :  $(requirements)
         <library>../../external//libxml2 #:<link>shared
      :  #default build options
      :  #usage requirements
         <implicit-dependency>raptor2.h
         <dependency>raptor2.h
         <link>shared:<define>RAPTOR_DYN_LINK
         <library>../../external//libxml2
   ;
   
}

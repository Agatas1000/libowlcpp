# @file "owl_cpp/external/ext/raptor.jam"
# part of owl_cpp project.
# Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
# Copyright Mikhail K Levin 2010-1

# Boost.build script for building Raptor library <http://librdf.org/raptor/>

import extension ;
import property ;
import project ;
import feature ;
import common ;
import regex ;
import path ;
import utils ; #local jam-file

extension.declare raptor ;

rule version_raptor ( properties * ) {
   local v = [ property.select <raptor-version> : $(properties) ] ;
   return $(v:G=) ;
}

rule version_split ( v ) {
   return [ regex.split $(v) "\\." ] ;
}

rule version_calc ( v ) {
   local vs = [ version_split $(v) ] ;
   local vdmin = $(vs[1])0000 ;
   local vd = [ CALC [ CALC $(vdmin) + $(vs[2])00 ] + $(vs[3]) ] ;
   return $(vdmin) $(vd) ;
}

rule config_h ( targets * : sources * : properties * ) {
   local define =
         HAVE_DLFCN_H
         HAVE_ERRNO_H
         HAVE_EXPAT_H
         HAVE_FCNTL_H
         HAVE_GETOPT
         HAVE_GETOPT_LONG
         HAVE_GETTIMEOFDAY
         HAVE_INTTYPES_H
         HAVE_ISASCII
         HAVE_LIMITS_H
         HAVE_MATH_H
         HAVE_MEMORY_H
         HAVE_RAPTOR_PARSE_DATE
         HAVE_SETJMP
         HAVE_SETJMP_H
         HAVE_STDINT_H
         HAVE_STDLIB_H
         HAVE_STRINGS_H
         HAVE_STRING_H
         HAVE_SYS_PARAM_H
         HAVE_SYS_STAT_H
         HAVE_SYS_TYPES_H
         HAVE_VSNPRINTF
         HAVE_XMLCTXTUSEOPTIONS
         HAVE_XMLSAX2INTERNALSUBSET
         RAPTOR_NFC_CHECK
         RAPTOR_PARSER_GUESS
         RAPTOR_PARSER_NTRIPLES
         RAPTOR_PARSER_RDFXML
         RAPTOR_PARSER_TURTLE
         RAPTOR_SERIALIZER_NTRIPLES
         RAPTOR_WWW_NONE
         RAPTOR_XML_EXPAT
         STDC_HEADERS
   ;
   
   local undef ;
   
   local v = 2.0.4 ; #[ version_raptor $(properties) ] ;
   local vs = [ version_split $(v) ] ;
   local vc = [ version_calc $(v) ] ;
   
   local other =
      "#define PACKAGE \"raptor2\""
      "#define PACKAGE_NAME \"Raptor RDF Parser and Serializer library\""
      "#define PACKAGE_VERSION \"$(v)\""
      "#define VERSION \"$(v)\""
      "#define PACKAGE_STRING \"Raptor RDF Parser and Serializer library $(v)\""
      "#define PACKAGE_BUGREPORT \"http://bugs.librdf.org/\""
      "#define PACKAGE_TARNAME \"raptor2\""
      "#define PACKAGE_URL \"\""
      "#define RAPTOR_MIN_VERSION_DECIMAL $(vc[1])"
      "#define RAPTOR_VERSION_DECIMAL $(vc[2])"
      "#define RAPTOR_VERSION_MAJOR $(vs[1])"
      "#define RAPTOR_VERSION_MINOR $(vs[2])"
      "#define RAPTOR_VERSION_RELEASE $(vs[3])"
      "#define SIZEOF_UNSIGNED_CHAR 1"
      "#define SIZEOF_UNSIGNED_INT 4"
      "#define SIZEOF_UNSIGNED_LONG 4"
      "#define SIZEOF_UNSIGNED_SHORT 2"
      "#if defined AC_APPLE_UNIVERSAL_BUILD"
      "# if defined __BIG_ENDIAN__"
      "#  define WORDS_BIGENDIAN 1"
      "# endif"
      "#else"
      "# ifndef WORDS_BIGENDIAN"
      "/* #  undef WORDS_BIGENDIAN */"
      "# endif"
      "#endif"
   ;
   
   switch [ property.select <target-os> : $(properties) ] {
      case *linux* :
      define +=
         HAVE_GETOPT_H
         HAVE_STRCASECMP
         HAVE_SYS_TIME_H
         TIME_WITH_SYS_TIME
         HAVE_UNISTD_H
      ;
      undef +=
      ;

      case *windows* :
      define +=
         HAVE_STRICMP
         WIN32_LEAN_AND_MEAN
         YY_USE_CONST
         WIN32_CONFIG_H
      ;
      undef +=
      ;
      other +=
#         "#define vsnprintf _vsnprintf"
         "#define snprintf _snprintf"
         "#define access _access"
#         "#define sscanf sscanf_s"
         "#define stricmp _stricmp"
         "#define strnicmp _strnicmp"
         "#define __func__ \"\""
         "#undef RAPTOR_INLINE"
         "#define RAPTOR_INLINE __inline"
         "#include \"boost/config.hpp\""
         "#if defined BOOST_MSVC"
         "#define lround(x) (((x) < 0) ? (long)((x)-0.5) : (long)((x)+0.5))"
         "#endif"
      ;
   }
   CONFIG on $(<) =
      $(other)
      "#define $(define) 1"
      "#undef $(undef)"
   ;
   NL on $(<) = "
" ;
}
actions config_h { @($(STDOUT):E=$(CONFIG:J=$(NL))$(NL)) > "$(<)" }

rule raptor2_h ( targets * : sources * : properties * ) {
   local v = 2.0.4 ; #[ version_raptor $(properties) ] ;
   local vs = [ version_split $(v) ] ;
   local vc = [ version_calc $(v) ] ;
   
   local src = [ utils.read_file $(sources:G=) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_DECIMAL@ $(vc[2]) ] ;
   src = [ regex.replace $(src) @VERSION@ $(v) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_MAJOR@ $(vs[1]) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_MINOR@ $(vs[2]) ] ;
   src = [ regex.replace $(src) @RAPTOR_VERSION_RELEASE@ $(vs[3]) ] ;
   src = [ regex.replace $(src) WIN32 RAPTOR_WIN32 ] ;
   
   local str =
      "#define RAPTOR_H"
      "" 
      "#include \"boost/config.hpp\""
      "#ifndef BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_IMPORT"
      "#endif"
      "#if defined(RAPTOR_DYN_LINK)"
      "#  if defined(RAPTOR_INTERNAL)"
      "#     define RAPTOR_API BOOST_SYMBOL_EXPORT"
      "#  else"
      "#     define RAPTOR_API BOOST_SYMBOL_IMPORT"
      "#  endif"
      "#else"
      "#  define RAPTOR_API"
      "#endif"
   ;
   src = [ regex.replace $(src) "#define RAPTOR_H" $(str:J="
") ] ;
   
   STR on $(<) = $(src) ;
}
actions raptor2_h { @($(STDOUT):E=$(STR)) > "$(<)" }

rule init ( version ? : location : options * ) {
   version ?= default ;
   
   make-singleton raptor_config.h 
      : 
      : @config_h
      : <raptor-version>$(version)
      <location>$(GENERATED_INCLUDE)/raptor
   ;
   
   local location_src = [ path.join $(location) src ] ;
   
   make-singleton raptor2.h 
      : $(location_src)/raptor2.h.in
      : @raptor2_h 
      : <raptor-version>$(version)
         <location>$(GENERATED_INCLUDE)/raptor
   ;
   
   src = 
      raptor_parse.c raptor_serialize.c
      raptor_rfc2396.c raptor_uri.c raptor_log.c raptor_locator.c
      raptor_namespace.c raptor_qname.c raptor_option.c
      raptor_general.c raptor_unicode.c raptor_www.c
      raptor_statement.c raptor_term.c raptor_sequence.c
      raptor_stringbuffer.c raptor_iostream.c raptor_xml.c
      raptor_xml_writer.c raptor_set.c turtle_common.c
      raptor_turtle_writer.c raptor_avltree.c snprintf.c
      raptor_json_writer.c raptor_memstr.c raptor_concepts.c
      raptor_syntax_description.c
      raptor_expat.c
      raptor_rdfxml.c raptor_sax2.c
      turtle_lexer.c turtle_parser.c
      ntriples_parse.c
      raptor_guess.c
      raptor_serialize_ntriples.c
      raptor_nfc_data.c raptor_nfc.c
      strcasecmp.c
      parsedate.c
   ;
   
   local requirements = 
         [ extension.define raptor $(version) : $(location) : $(options) ]
         <raptor-version>$(version)
         <raptor-location>$(location)
         <include>$(location_src)
         <include>$(BOOST[1])
         <define>HAVE_CONFIG_H
         <define>LIBRDFA_IN_RAPTOR
         <define>RAPTOR_INTERNAL
         <implicit-dependency>raptor_config.h
         #<dependency>raptor_config.h
         <implicit-dependency>raptor2.h
         #<dependency>raptor2.h
         <link>shared:<define>RAPTOR_DYN_LINK
         <toolset>msvc:<define>RAPTOR_WIN32
         <toolset>gcc,<target-os>linux:<cflags>"-fvisibility=hidden"
   ;
   
   
   lib raptor
      :  $(location_src)/$(src)
      :  $(requirements)
         <link>static:<library>../../external//expat
         <link>shared:<library>../../external//expat_pic
      :  #default build options
      :  #usage requirements
         <implicit-dependency>raptor2.h
         <dependency>raptor2.h
         <link>shared:<define>RAPTOR_DYN_LINK
   ;
   
}

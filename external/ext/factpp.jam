# "owl_cpp/external/ext/factpp.jam"
# part of owl_cpp project.
# Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
# Copyright Mikhail K Levin 2010-1

# Boost.build script for building FaCT++ library 
# <http://code.google.com/p/factplusplus/>

import extension ;

import property ;
import project ;
import feature ;
import common ;
import path ;
import utils ; #local jam-file

extension.declare factpp ;

rule factpp_kernel_config_hpp ( targets * : sources * : properties * ) {
   STR on $(<) =
      "#ifndef FACT_KERNEL_CONFIG_HPP"
      "#define FACT_KERNEL_CONFIG_HPP"
      ""
      "#include \"boost/config.hpp\""
      "#ifndef BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_IMPORT"
      "#endif"
      "#if defined(FACTPP_KERNEL_DYN_LINK)"
      "#  if defined(FACTPP_KERNEL_SOURCE)"
      "#     define FACTPP_KERNEL_DECL BOOST_SYMBOL_EXPORT"
      "#  else"
      "#     define FACTPP_KERNEL_DECL BOOST_SYMBOL_IMPORT"
      "#  endif"
      "#else"
      "#  define FACTPP_KERNEL_DECL"
      "#endif"
      ""
      "class FACTPP_KERNEL_DECL ReasoningKernel;"
#      "#include \"Kernel.h\""
      ""
      "#endif /* FACT_KERNEL_CONFIG_HPP */"
   ;
   
   NL on $(<) = "
" ;
}
actions factpp_kernel_config_hpp { @($(STDOUT):E=$(STR:J=$(NL))$(NL)) > "$(<)" }

rule factpp_kernel_config_cpp ( targets * : sources * : properties * ) {
   STR on $(<) =
      ""
      "#include \"factpp_kernel_config.hpp\""
   ;
   
   NL on $(<) = "
" ;
}
actions factpp_kernel_config_cpp { @($(STDOUT):E=$(STR:J=$(NL))$(NL)) > "$(<)" }

rule init ( version ? : location : options * )
{
   version ?= default ;
   
   local kernel_location = [ path.join $(location) src/Kernel ] ;
   
   make factpp_kernel_config.hpp 
      : 
      : @factpp_kernel_config_hpp
      : <factpp-version>$(version)
        <location-prefix>src
   ;
#   explicit factpp_kernel_config.hpp ;

   make factpp_kernel_config.cpp 
      : 
      : @factpp_kernel_config_cpp
      : <factpp-version>$(version)
        <location-prefix>src
   ;
   
   local requirements = 
      [ extension.define factpp $(version)
         : $(kernel_location)
         : $(options)
      ]
      <dependency>factpp_kernel_config.hpp
      <implicit-dependency>factpp_kernel_config.hpp
      <include>$(BOOST[0])
      <include>$(kernel_location)
      <define>FACTPP_KERNEL_SOURCE
      <link>shared:<define>FACTPP_KERNEL_DYN_LINK
   ;
   #exit $(requirements) ;
   
   local src = [ glob $(kernel_location)/*.cpp : $(kernel_location)/parseTime.cpp ] ;
   src += 
      #$(kernel_location)/Kernel.cpp 
      factpp_kernel_config.cpp ;
   lib factpp_kernel
      :   $(src)
      :   $(requirements)
         <toolset>msvc:<link>static
         <toolset>gcc:<cflags>"-fvisibility=hidden -fvisibility-inlines-hidden"
         <toolset>gcc:<linkflags>"-fvisibility=hidden -fvisibility-inlines-hidden"
      :   
      :   
         <include>$(kernel_location)
      ;
}

# "owl_cpp/external/ext/factpp.jam"
# part of owl_cpp project.
# Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
# Copyright Mikhail K Levin 2010-1

# Boost.build script for building FaCT++ library 
# <http://code.google.com/p/factplusplus/>

import extension ;

import property ;
import project ;
import feature ;
import common ;
import regex ;
import path ;
import utils ; #local jam-file

extension.declare factpp ;

rule config_hpp ( targets * : sources * : properties * ) {
   STR on $(<) =
      "#ifndef FACTPP_CONFIG_HPP"
      "#define FACTPP_CONFIG_HPP"
      ""
      "#include \"boost/config.hpp\""
      "#ifndef BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_IMPORT"
      "#endif"
      "#if defined(FACTPP_KERNEL_DYN_LINK)"
      "#  if defined(FACTPP_KERNEL_SOURCE)"
      "#     define FACTPP_KERNEL_DECL BOOST_SYMBOL_EXPORT"
      "#  else"
      "#     define FACTPP_KERNEL_DECL BOOST_SYMBOL_IMPORT"
      "#  endif"
      "#else"
      "#  define FACTPP_KERNEL_DECL"
      "#endif"
      ""
      "#endif /* FACTPP_CONFIG_HPP */"
   ;
   
   NL on $(<) = "
" ;
}
actions config_hpp { @($(STDOUT):E=$(STR:J=$(NL))$(NL)) > "$(<)" }

rule kernel_config_hpp ( targets * : sources * : properties * ) {
   STR on $(<) = 
      "#ifndef FACTPP_KERNEL_CONFIG_HPP"
      "#define FACTPP_KERNEL_CONFIG_HPP"
      ""
      "#include \"factpp/config.hpp\""
      "class FACTPP_KERNEL_DECL ReasoningKernel;"
      "#include \"Kernel.h\""
      ""
      "#endif /* FACTPP_KERNEL_CONFIG_HPP */"
   ;
   NL on $(<) = "
" ;
}
actions kernel_config_hpp { @($(STDOUT):E=$(STR:J=$(NL))$(NL)) > "$(<)" }

rule kernel_cpp ( targets * : sources * : properties * ) {
   local src = [ utils.read_file $(sources:G=) ] ;
   src = [ regex.replace $(src) "Kernel.h" "factpp/kernel_config.hpp" ] ;
   STR on $(<) = $(src) ;
}
actions kernel_cpp { @($(STDOUT):E=$(STR)) > "$(<)" }

rule init ( version ? : location : options * )
{
   version ?= default ;
   
   local kernel_location = [ path.join $(location) src/Kernel ] ;
   
   make-singleton config.hpp 
      : 
      :  @config_hpp
      :  <factpp-version>$(version)
         <location>$(GENERATED_INCLUDE)/factpp
   ;

   make-singleton kernel_config.hpp
      : 
      :  @kernel_config_hpp
      :  <factpp-version>$(version)
         <location>$(GENERATED_INCLUDE)/factpp
   ;
   
   make-singleton Kernel.cpp 
      :  $(kernel_location)/Kernel.cpp
      :  @kernel_cpp
      :  <factpp-version>$(version)
         <location>$(GENERATED_LIB)/factpp
   ;
   
   local src = 
      [ 
         glob $(kernel_location)/*.cpp 
         : #exclude:
            $(kernel_location)/parseTime.cpp
            $(kernel_location)/Kernel.cpp
      ]
      Kernel.cpp
   ;
   #src = Kernel.cpp ;
   
   lib factpp_kernel
      :   $(src)
      :   #requirements
         [ extension.define factpp $(version) : $(kernel_location) : $(options) ]
         <include>$(kernel_location)
         <include>$(BOOST[1])
         <include>$(GENERATED_INCLUDE)
         <implicit-dependency>config.hpp
         <implicit-dependency>kernel_config.hpp
         <define>FACTPP_KERNEL_SOURCE
         <link>shared:<define>FACTPP_KERNEL_DYN_LINK
         <toolset>gcc:<cflags>"-fvisibility=hidden -fvisibility-inlines-hidden"
      :   
      :   
         <include>$(kernel_location)
         <include>$(GENERATED_INCLUDE)
      ;
}

/** @file "/owlcpp/include/owlcpp/lib_info.hpp" 
part of owlcpp project.
@n Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
@n Copyright Mikhail K Levin 2011

@mainpage %owlcpp library

@verbinclude readme.txt

@namespace owlcpp
@brief Main namespace of %owlcpp library

@namespace owlcpp::terms
@brief Definitions of standard OWL namespaces and terms
@details standard OWL namespace and term IRIs are represented by small tag classes.
Tags store namespace IRI, prefix, and name strings.
Each Tag also has a unique indices as compile-time constants.
Tag classes are generated by preprocessor macros from lists.
Tag type-lists are also generated by macros.

@namespace owlcpp::test
@brief Namespace for unit-tests

*******************************************************************************/
#ifndef LIB_INFO_HPP_
#define LIB_INFO_HPP_
#include <string>
#include <iosfwd>
#include "owlcpp/version.hpp"

#ifndef OWLCPP_VERSION_1
#error define OWLCPP_VERSION_1
#endif

#ifndef OWLCPP_VERSION_2
#error define OWLCPP_VERSION_2
#endif

#ifndef OWLCPP_VERSION_3
#error define OWLCPP_VERSION_3
#endif

#ifndef OWLCPP_VERSION_EXTRA
#error define OWLCPP_VERSION_EXTRA
#endif

#ifndef OWLCPP_BUILD
#error define OWLCPP_BUILD
#endif

namespace owlcpp{

/**@brief library info
*******************************************************************************/
struct Lib_info {
   static std::string const& name() {
      static const std::string s("owlcpp");
      return s;
   }
   static int version_1() {return OWLCPP_VERSION_1;}
   static int version_2() {return OWLCPP_VERSION_2;}
   static int version_3() {return OWLCPP_VERSION_3;}
   static std::string const& version_e() {
      static const std::string s(OWLCPP_VERSION_EXTRA);
      return s;
   }
   static int build() { return OWLCPP_BUILD; }

   template<class Ch, class Tr> static std::basic_ostream<Ch,Tr>&
   print_version(std::basic_ostream<Ch,Tr>& os) {
      os
      << version_1() << '.'
      << version_2() << '.'
      << version_3()
      ;
      if( ! version_e().empty() ) os << '-' << version_e();
      return os;
   }

   template<class Ch, class Tr> static std::basic_ostream<Ch,Tr>&
   print(std::basic_ostream<Ch,Tr>& os) {
      print_version( os << name() << " v" )
            << " build:" << build();
      return os;
   }
};

}//namespace owlcpp
#endif /* LIB_INFO_HPP_ */

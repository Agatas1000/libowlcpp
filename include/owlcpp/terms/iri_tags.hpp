/** @file "/owlcpp/include/owlcpp/terms/iri_tags.hpp" 
part of owlcpp project.
@n @n Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
@n Copyright Mikhail K Levin 2012
*******************************************************************************/
#ifndef IRI_TAGS_HPP_
#define IRI_TAGS_HPP_
/**@brief Define set of common OWL namespaces.
@details This macro is used for generating types and typelists.
((class name)("standard prefix")("IRI"))
*******************************************************************************/
#define OWLCPP_IRI_LIST \
   ((empty)("")("")) \
   ((blank)("_")("_")) \
   ((rdf)("rdf")("http://www.w3.org/1999/02/22-rdf-syntax-ns")) \
   ((rdfs)("rdfs")("http://www.w3.org/2000/01/rdf-schema")) \
   ((xsd)("xsd")("http://www.w3.org/2001/XMLSchema")) \
   ((owl)("owl")("http://www.w3.org/2002/07/owl")) \
/* */

#include "owlcpp/terms/uri_macro.hpp"
#include "owlcpp/ns_id.hpp"

namespace owlcpp{ namespace terms{

/**@struct N_xxx
@brief Namespace IRI tag classes generated by macro OWLCPP_GENERATE_IRI_TAGS
@details Declare types for each standard IRI, e.g.: @code
struct N_rdfs {
   static const unsigned index = 11;
   static std::string const & iri() {
      static const std::string str="http://www.w3.org/2000/01/rdf-schema";
      return str;
   }
   static std::string const & prefix() {
      static const std::string str="rdfs";
      return str;
   }
   typedef ::owlcpp::Ns_id id_type;
   static id_type id() {return id_type(index);}
}; @endcode
*******************************************************************************/
OWLCPP_GENERATE_IRI_TAGS(OWLCPP_IRI_LIST, 0)

}//namespace terms
}//namespace owlcpp
#endif /* IRI_TAGS_HPP_ */
